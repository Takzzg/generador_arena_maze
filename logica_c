instructionsSize//------------------------------------------ INITIALIZATION ------------------------------------------------
#include <mbed.h>
#include <stdlib.h>
#include <Adafruit_BNO055.h>
#include "MotorDC.h"
imu::Quaternion quat;
imu::Vector<3> vector_euler;
imu::Vector<3> vector_acc;
imu::Vector<3> vector_euler_init;

MotorDC M_izq(PTD3, PTC9, PTB23);  //pwma, ain1, ain2---- M2
MotorDC M_der(PTA1, PTB9, PTC1);  //pwmb, bin1, bin2---- M1
DigitalOut stby(PTC8,1);

#define BNO055_SAMPLERATE_DELAY_MS (100)
int st;
I2C  i2c(PTE25,PTE24);
Adafruit_BNO055 bno = Adafruit_BNO055(55,0x28,&i2c);
Serial pc(USBTX,USBRX);

Ticker update_speed_motors;

struct Cell{
  bool north; //sets all cells' variables to false (= blank cell)
  bool south;
  bool east;
  bool west;
  bool checkpoint;
  bool start;
  bool black;
  bool visited;
  bool exit;
  bool out;
  char victimStatus;
  char *instructions;
  int instructionsSize;
  int weight; //sets a sealing for the weight to compare to
  int x, y, z;
  int linkedFloor;
};

void initCells(struct Cell *targ){
  targ->black = false;
  targ->exit = false;
  targ->north = false;
  targ->south = false;
  targ->west = false;
  targ->east = false;
  targ->linkedFloor = 0;
  targ->x;
  targ->y;
  targ->z;
  targ->out = false;
  targ->weight = 999;
  targ->instructionsSize = 0;
  targ->visited = false;
  targ->checkpoint = false;
  targ->start = false;
  targ->victimStatus = 'F';
  targ->instructions = new char[1];
}

/*void assignCells(struct Cell *to, struct Cell from){
  to->black = from.black;
  to->exit = from.exit;
  to->north = from.north;
  to->south = from.south;
  to->west = from.west;
  to->east = from.east;
  to->linkedFloor = from.linkedFloor;
  to->x = from.x;
  to->y = from.y;
  to->z = from.z;
  to->out = from.out;
  to->weight =  from.weight;
  to->instructionsSize = from.instructionsSize;
  to->visited = from.visited;
  to->checkpoint = from.checkpoint;
  to->start = from.start;
  to->victimStatus =  from.victimStatus;
  for(int i = 0; i < from.instructionsSize; i++)
    to->instructions[i] = from.instructions[i];
}*/

const int ySize = 1;//maximum expected width of the arena (worst case scenario: 20 usable)
const int xSize = 1;//maximum expected height of the arena (worst case scenario: 20 usable)
const int zSize = 1;//maximum expected amount of floors
bool finishedFloor = false;//this floor has been explored entirely
bool ignore = false;
char dir = 'N'; //points in which direction the robot is facing. it can be N, E, W or S. Always starts facing N
int x = 0, y = 0, z = 0;//robot starts in the middle of the first floor.
int lastFloor = 0;
int quit = 0;

int getIndex(int Z, int Y, int X, int ySum, int xSum){
  return X + Y * xSize + Z * (xSize + xSum) * (ySize + ySum);
}

int getIndex(int Z, int Y, int X){
  return X + Y * xSize + Z * xSize * ySize;
}

void actual_turn(float degrees){
  float eje_x;
  wait_ms(1000);
  quat = bno.getQuat();
  vector_euler_init = quat.toEuler();
  vector_euler_init.toDegrees();

  quat = bno.getQuat();
  vector_euler = quat.toEuler();
  vector_euler.toDegrees();
  wait_ms(1000);

  while (fabs(eje_x) < degrees) {
    eje_x = vector_euler.x() - vector_euler_init.x();
    if(eje_x > 180) eje_x -= 360;
    if(eje_x < -180) eje_x += 360;
  }
  wait_ms(1);

}

void turn(int degrees){
  if(degrees < 0){
    //motor derecho = 0.5
    //motor izquierdo = -0.5
  }
  else{
    //motor derecho = -0.5
    //motor izquierdo = 0.5
  }
  actual_turn(degrees);
  //motor derecho = 0
  //motor izquierdo = 0
}

void addLayer(char axis){
  if(axis == 'x'){
    struct Cell *tempArena = new struct Cell[(xSize + 1) * ySize) * zSize];
    for(int h = 0; h < zSize; h++){
      for(int i = 0; i < ySize; i++){
        for(int j  = 0; j < xSize; j++){
          tempArena[getIndex(h, i, j, 0, 1)] = arena[getIndex(h, i, j)];
        }
      }
    }
    arena = new struct Cell[ySize * ++xSize * zSize];
    for(int h = 0; h < zSize; h++){
      for(int  i = 0; i < ySize; i++){
        for(int j = 0; j < xSize; j++){
          arena[getIndex(z, i, j)] = tempArena[getIndex(z, i, j)];
        }
      }
    }delete[] tempArena;
  }
  else if(axis == 'y'){
    struct Cell *tempArena = new struct Cell[(ySize + 1) * xSize * zSize)];
    for(int h = 0; h < zSize; h++){
      for(int i = 0; i < ySize; i++){
        for(int j  = 0; j < xSize; j++){
          tempArena[getIndex(z, i, j, 1, 0)] = arena[getIndex(z, i, j)];
        }
      }
    }
    arena = new struct Cell[++ySize * xSize * zSize];
    for(int h = 0; h < zSize; h++){
      for(int  i = 0; i < ySize; i++){
        for(int j = 0; j < xSize; j++){
          arena[getIndex(z, i, j)] = tempArena[getIndex(z, i, j)];
        }
      }
    }delete[] tempArena;
  }
}

void shift(char axis){
  if(axis == 'x'){
    adddLayer('x');
    for(int h = 0; h < zSize; h++){
      for(int i = 0; i < ySize; i++){
        for(int j = xSize-1; j > 0; j--){
          arena[getIndex(h, y, x)] = arena[getIndex(h, y, x-1)];
        }
      }
    }
  }
  else if(axis == 'y'){
    addLayer('y');
    for(int h = 0; h < zSize; h++){
      for(int i = ySize-1; i > 0; i--){
        for(int j = 0; j < xSize; j++){
          arena[getIndex(h, y, x)] = arena[getIndex(h, y-1, x)];
        }
      }
    }
  }
}

void moveRobot(char destination){
  bool reverse = false;//instead of turning 180Â°, we can go back 30cm and keep the direction
  
  if(destination != dir){
    switch(dir){
      case 'N':
        switch (destination){
        case 'E':
          turn(90);
          if(x == xSize-1)addLayer('x');
          x++;
          break;
        case 'W':
          turn(-90);
          if(x==0)shift();
          x--;
          break;
        case 'S':
          //retroceder 30cm;
          if(y == ySize-1)addLayer('y');
          y++;
          //DON'T turn(180);
        }
        break;

      case 'E':
        switch (destination){
        case 'N':
          turn(-90);
          if(y==0)shift('y');
          y--;
          break;
        case 'S':
          turn(90);
          if(y == ySize-1)addLayer(y);
          y++;
          break;
        case 'W':
          //retroceder 30cm;
          //DON'T turn(180);
          if(x == 0)shift('x');
          else x--;
        }
        break;

      case 'S':
        switch (destination){
        case 'N':
          //retroceder 30cm;
          //DON'T turn(180);
          
          if(y == 0)shift('y');
          y--;
          break;
        case 'E':
          turn(-90);
          if(x == xSize-1)addLayer('x');
          x++;
          break;
        case 'W':
          turn(90);
          if(x == 0)shift('x');
          else x--;
        }
        break;

      case 'W':
        switch (destination){
        case 'N':
          turn(90);
          if(y == 0)shift('y');
          y--;
          break;
        case 'E':
          //retroceder 30cm;
          //DON'T turn(180);
          if(x == xSize-1)addLayer('x');
          x++;
          break;
        case 'S':
          turn(-90);
          if(y == ySize-1)addLayer('y');
          y++;
        }
    }
    if(!reverse) dir = destination;
  }
  //if(!reverse) avanzar 30cm;
}

struct Cell lastCheckpoint;//The last checkpoint visited
int historySize = 1;//keeps track of the amount of tiles in the array
struct Cell *history = new struct Cell[historySize];
struct Cell *arena = new struct Cell[zSize * ySize * xSize];

struct Cell addOption(char a, struct Cell compareFrom, struct Cell compareTo, int addWeight) {
  compareTo.weight = compareFrom.weight + addWeight; //changes its weight
  for(int i = 0; i < compareFrom.instructionsSize; i++){
    compareTo.instructions[i] = compareFrom.instructions[i];
  }
  compareTo.instructions[compareTo.instructionsSize] = a; //an extra instruction to get to compareFrom is added
  compareTo.instructionsSize++;
  arena[getIndex(z, y, x)] = compareTo;//the matrix is updated with the newest information
  return compareTo;
}

bool check(int y, int x) {//returns true if at least one neighbour cell isn't explored and there's no wall between the robot and it
  if (!arena[getIndex(z, y, x)].north)
    if (!arena[getIndex(z,y-1,x)].visited) return true;

  if (!arena[getIndex(z,y,x)].south)
    if (!arena[getIndex(z,y+1,x)].visited) return true;

  if (!arena[getIndex(z,y,x)].east)
    if (!arena[getIndex(z,y,x+1)].visited) return true;

  if (!arena[getIndex(z,y,x)].west)
    if (!arena[getIndex(z,y,x-1)].visited) return true;

  return false;
}

bool end() { //checks if the whole room has been visited
  for (int i = 0; i < ySize; i++) {
    for (int j = 0; j < xSize; j++) {
      if (arena[getIndex(z,i,j)].visited && !arena[getIndex(z,i,j)].black)
        if (check(i, j)) return false;
    }
  }
  return true;
}

void follow(struct Cell target) {
  for (int i = 0; i < target.instructionsSize; i++) {
    turn(target.instructions[i]);
    moveRobot(dir);
  }
}

void search(struct Cell compareFrom) {
  struct Cell compareTo;//cell that's going to be visited from compareFrom
  int optionsSize = 1;
  struct Cell *options = new struct Cell[optionsSize];
  options = new struct Cell[1];//array which stores the cells that later can be used to compare from
  arena[getIndex(z,compareFrom.y,compareFrom.x)].weight = 0;//current cell's value is 0
  compareFrom.weight = 0;
  finishedFloor = end();
  int weightGain = 1;

  while ((!check(compareFrom.y, compareFrom.x) && !finishedFloor) || (finishedFloor && ((!compareFrom.start && z == 0) || (!compareFrom.exit && z != 0)))) {//until it starts comparing from a cell with unvisited neighbours
    arena[getIndex(z,compareFrom.y,compareFrom.x)].out = true;//the cell is marked on the matrix

    if (!compareFrom.north) {//if there's no north wall
      if (!arena[getIndex(z,compareFrom.y-1,compareFrom.x)].out && !(arena[getIndex(z,compareFrom.y-1,compareFrom.x)].black && arena[getIndex(z,compareFrom.y-1,compareFrom.x)].visited)) {//if the north cell hasn't been explored
        compareTo = arena[getIndex(z,compareFrom.y-1,compareFrom.x)];//it's used to compare
        if(('N' != compareFrom.instructions[compareFrom.instructionsSize - 1] && compareFrom.weight != 0) || (compareFrom.weight == 0 && 'N' != dir))weightGain++;//Add weight if a turn is involved
        if (compareFrom.weight+weightGain < compareTo.weight) { //if traveling from the actual place there is better than from the last place
          struct Cell *tempOptions = new struct Cell[++optionsSize];
          for(int i  = 0; i < optionsSize-1; i++){
            tempOptions[i] = options[i];
          }
          options = new struct Cell[optionsSize];
          for(int i  = 0; i < optionsSize-1; i++){
            options[i] = tempOptions[i];
          }
          delete[] tempOptions;

          options[optionsSize] = addOption('N', compareFrom, compareTo, weightGain);
          optionsSize++; //amount of options is incremented
        }
      }
    }

    if (!compareFrom.east && compareFrom.x != xSize-1) {//if there's no east wall
      if (!arena[getIndex(z,compareFrom.y,compareFrom.x+1)].out && !(arena[getIndex(z,compareFrom.y,compareFrom.x+1)].black && arena[getIndex(z,compareFrom.y,compareFrom.x+1)].visited)) {//the right cell hasn't been explored yet
        compareTo =  arena[getIndex(z,compareFrom.y,compareFrom.x+1)];//used to comapre
        if(('E' != compareFrom.instructions[compareFrom.instructionsSize - 1] && compareFrom.weight != 0) || (compareFrom.weight == 0 && 'E' != dir))weightGain++;//Add weight if a turn is involved
        if (compareFrom.weight+weightGain < compareTo.weight) { //if traveling from the actual place there is better than from the last place
          struct Cell *tempOptions = new struct Cell[++optionsSize];
          for(int i  = 0; i < optionsSize-1; i++){
            tempOptions[i] = options[i];
          }
          options = new struct Cell[optionsSize];
          for(int i  = 0; i < optionsSize-1; i++){
            options[i] = tempOptions[i];
          }
          delete[] tempOptions;

          options[optionsSize] = addOption('E', compareFrom, compareTo, weightGain);
          optionsSize++; //amount of options is incremented
        }
      }
    }

    if (!compareFrom.south && compareFrom.y != ySize-1) {//if there's no south wall
      if (!arena[getIndex(z,compareFrom.y+1,compareFrom.x)].out && !(arena[getIndex(z,compareFrom.y+1,compareFrom.x)].black && arena[getIndex(z,compareFrom.y+1,compareFrom.x)].visited)) {//if the south cell hasn't been explored yet
        compareTo = arena[getIndex(z,compareFrom.y+1,compareFrom.x)];//used to compare
        if(('S' != compareFrom.instructions[compareFrom.instructionsSize - 1] && compareFrom.weight != 0) || (compareFrom.weight == 0 && 'S' != dir))weightGain++;//Add weight if a turn is involved
        if (compareFrom.weight+weightGain < compareTo.weight) { //if traveling from the actual place there is better than from the last place
          struct Cell *tempOptions = new struct Cell[++optionsSize];
          for(int i  = 0; i < optionsSize-1; i++){
            tempOptions[i] = options[i];
          }
          options = new struct Cell[optionsSize];
          for(int i  = 0; i < optionsSize-1; i++){
            options[i] = tempOptions[i];
          }
          delete[] tempOptions;

          options[optionsSize] = addOption('S', compareFrom, compareTo, weightGain);
          optionsSize++; //amount of options is incremented
        }
      }
    }

    if (!compareFrom.west) {//if there's no west wall
      if (!arena[getIndex(z,compareFrom.y,compareFrom.x-1)].out && !(arena[getIndex(z,compareFrom.y,compareFrom.x-1)].black && arena[getIndex(z,compareFrom.y,compareFrom.x-1)].visited)) {//if the west cell hasn't been explored yet
        compareTo = arena[getIndex(z,compareFrom.y,compareFrom.x-1)];//used to compareSe usa para comparar
        if(('W' != compareFrom.instructions[compareFrom.instructionsSize - 1] && compareFrom.weight != 0) || (compareFrom.weight == 0 && 'W' != dir))weightGain++;//Add weight if a turn is involved
        if (compareFrom.weight+weightGain < compareTo.weight) { //if traveling from the actual place there is better than from the last place
          struct Cell *tempOptions = new struct Cell[++optionsSize];
          for(int i  = 0; i < optionsSize-1; i++){
            tempOptions[i] = options[i];
          }
          options = new struct Cell[optionsSize];
          for(int i  = 0; i < optionsSize-1; i++){
            options[i] = tempOptions[i];
          }
          delete[] tempOptions;

          options[optionsSize] = addOption('W', compareFrom, compareTo, weightGain);
          optionsSize++; //amount of options is incremented
        }
      }
    }

    int bestWeight = 9999;
    for (int i = 0; i < optionsSize; i++) {//reads the array to find the lower cost cells
      if (arena[getIndex(z,options[i].y,options[i].x)].weight < bestWeight && !arena[getIndex(z,options[i].y,options[i].x)].out) {
        bestWeight = options[i].weight;
      }
    }

    for (int i = 0; i < optionsSize; i++) {
      if (!arena[getIndex(z, options[i].y, options[i].x)].out && arena[getIndex(z, options[i].y, options[i].x)].weight == bestWeight) {
        compareFrom = options[i];
        break;
      }
    }
  }

  follow(compareFrom);

  for (int i = 0; i < ySize; i++) {
    for (int j = 0; j < xSize; j++) {
      arena[getIndex(z, i, j)].weight = 9999;
      arena[getIndex(z, i, j)].out = false;
      arena[getIndex(z, i, j)].instructionsWeight = 0;
    }
  }
  ignore = true;
  delete[] options;
}

void init() {
  char one_direction[5] = {'N','W','S','E','N'};
  for(int i = 0; i < 4; i++)
    if(dir == one_direction[i]) dir = one_direction[i+1];
}

void loadData(){
  struct Cell loadCelll;

  loadCelll.black = true;
  loadCelll.checkpoint = true;
  loadCelll.north = true;
  loadCelll.east = true;
  loadCelll.south = true;
  loadCelll.west = true;

  arena[getIndex(z, y, x)] = loadCelll;
}

void changeDir() { //changes robot's direction
  bool f = false;
  switch (dir) {
  case 'N'://it's going north
    if (!arena[getIndex(z, y, x)].east) {//if the east cell isn't explored and has no wall in between
    if(x == xSize - 1) addLayer('x');
      if (!arena[getIndex(z, y, x+1)].visited) {
        moveRobot('E');
        ignore = true;
        f = true;
      }
    }
    if (f != true) { //else if the north cell hasn't been explored and has no wall between
      if (arena[getIndex(z, y, x)].north) init();
      else{
        if( y == 0) shift('y');
        if (arena[getIndex(z, y-1, x)].visited)init();
       }
    }
    break;

  case 'W'://it's going left
    if (!arena[getIndex(z, y, x)].north) {//if the north cell isn't explored and has no wall in between
      if(y == 0) shift('y');
      if (!arena[getIndex(z, y-1, x)].visited) {
        moveRobot('N');
        ignore = true;
        f = true;
      }
    }
    if (f != true) { //else if the west cell hasn't been explored and has no wall between
      if (arena[getIndex(z, y, x)].west) init();
      else {
        if( x == 0) shift('x');
        if (arena[getIndex(z, y, x-1)].visited)init();
      }
    }
    break;

  case 'S'://it's going down
    if (!arena[getIndex(z, y, x)].west) {//if the west cell isn't explored and has no wall in between
      if(x == 0) shift('x');
      if (!arena[getIndex(z, y, x-1)].visited) {
        moveRobot('W');
        ignore = true;
        f = true;
      }
    }
    if (f != true) { //else if the south cell hasn't been explored and has no wall between
      if (arena[getIndex(z, y, x)].south) init();
      else {
        if(y == ySize-1)addLayer('y');
        if (arena[getIndex(z, y+1, x)].visited)init();
      }
    }
    break;

  default: //it's going right
    if (!arena[getIndex(z, y, x)].south) {//if the south cell isn't explored and has no wall in between
      if(y == ySize-1) addLayer('y');
      if (!arena[getIndex(z, y+1, x)].visited) {
        moveRobot('S');
        ignore = true;
        f = true;
      }
    }
    if (f != true) { //else if the east cell hasn't been explored and has no wall between
      if (arena[getIndex(z, y, x)].east) init();
      else {
        if(x = xSize-1) addLayer('x');
        if (arena[getIndex(z, y, x+1)].visited)init();
      }
    }
  }
}

void run() {
  {
    moveRobot(dir);
    loadData();
    arena[getIndex(z, y, x)].exit = true; //sets the current cell as visited

    arena[getIndex(z, y, x)].visited = true; //sets the current cell as visited
    if (!arena[getIndex(z, y, x)].checkpoint){ //if it's not a checkpoint, it's added to the history of visited cells
      struct Cell *tempHistory = new struct Cell[++historySize];
      for(int i = 0; i < historySize-1; i++){
        tempHistory[i] = history[i];
      }
      history = new struct Cell[historySize];
      for(int i = 0; i < historyweight; i++){
        history[i] = tempHistory[i];
      }
      delete[] tempHistory;
      history[historySize] = arena[getIndex(z, y, x)];
      historySize++;
    }
    else { //if it is a checkpoint, sets it as the last visited checkpoint and resets the history
      delete[] history;
      historySize = 0;
      lastCheckpoint = arena[getIndex(z, y, x)];
    }

    if (arena[getIndex(z, y, x)].black) //if it finds a black cell, it'll go back
      moveRobot(dir);

    if (arena[getIndex(z, y, x)].exit) { //if it finds an exit
      if (!arena[getIndex(z, y, x)].checkpoint){ //and the room isn't completed yet, it just adds it to the history
        history[historySize] = arena[getIndex(z, y, x)];
        historySize++;
      }
      else { //if the room's fully explored, it restarts the history and sets it as the last checkpoint
        delete[] history;
        historySize = 0;
        lastCheckpoint = arena[getIndex(z, y, x)];
      }
      arena[getIndex(z, y, x)].linkedFloor = ++lastFloor;
      arena[getIndex(lastFloor, y, x)].linkedFloor = z;
      //[INSERTE FUNCIÃN PARA SUBIR RAMPAS AQUÃ]//
      z = lastFloor;
      ignore = true;
      arena[getIndex(z, y, x)].visited = true;
    }
  }
}

void recorrer(){
    loadData();
    ignore = false;
    finishedFloor = false ;
    if (!check(y, x)) { //if the robot is stuck
      if (!arena[getIndex(z, y, x)].exit) search(arena[getIndex(z, y, x)]); //if it's stuck on a ramp and the room isn't finished it'll continue exploring the room
      else if(!finishedFloor) search(arena[getIndex(z, y, x)]);//got stuck on a visited ramp, but there are still some tiles left unvisited.
      else{
        //[PLEASE INSERTE FUNCIÃN PARA SUBIR O BAJAR UNA RAMPA AQUÃ PLEASEEEEE]//
        z = arena[getIndex(z, y, x)].linkedFloor;
        ignore = true;
        arena[getIndex(z, y, x)].visited = true; //sets the cell as visited
        arena[getIndex(z, y, x)].exit = false;
        finishedFloor = false;
      }
    }
    else {
      changeDir();
      if (!ignore) run();
    }
}

int main(){
  while (1){
    recorrer();
  }
}
